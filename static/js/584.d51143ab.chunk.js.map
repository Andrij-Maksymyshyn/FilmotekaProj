{"version":3,"file":"static/js/584.d51143ab.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","fetchApi/fetchApi.js","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;","import { SpinnerRoundOutlined } from 'spinners-react';\nimport { SpinnerWrapper } from './Loader.styled';\n\nconst Loader = () => (\n    <SpinnerWrapper>\n       <SpinnerRoundOutlined\n      size={50}\n      thickness={100}\n      speed={100}\n      color=\"#36ad47\"\n    />\n    </SpinnerWrapper>\n);\n\nexport default Loader;\n\n\n","import axios from 'axios';\n\nconst API_KEY = '3b94c1b54af7d429587ecf26a37007c0';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendCollection() {\n    return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n    };\n\nexport async function fetchMovieByKeyWord(value) {\n    return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${value}&include_adult=false`);\n};\n\nexport async function fetchMovieById(filmId) {\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \n};\n\n\n\nexport async function fetchMovieCredits(movieId) {\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n \n\nexport async function fetchMovieReviews(movieId) {\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n     padding: 20px;\n`;\n\nexport const Form = styled.form`\n    display: flex;\n    align-items: center;\n`;\n\nexport const Input = styled.input`\n display: inline-block;\n    margin-right: 15px;\n    width: 20%;\n    border-radius: 5px;\n    font-size: 20px;\n    outline: none;\n    border-color: dimgrey;;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const Button = styled.button`\ndisplay: inline-block;\n    width: 10%;\n    height: 29px;\n    border: 0;\n    cursor: pointer;\n    outline: none;\n    opacity: 0.8;\n    background-color: slategrey;\n    border-radius: 5px;\n\n     &:hover, &:focus {\n    opacity: 1;\n  }\n`;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { Box, Form, Input, Button } from './Searchbar.styled';\n\n\nfunction Searchbar({propSubmit}) {\nconst [inputFilmValue, setInputFilmValue] = useState('');\n\n    const handleChange = e => {\n    const { value } = e.currentTarget;\n\n    setInputFilmValue(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputFilmValue.trim() === '') {\n      toast.error('Please, fill in the field of search');\n      return;\n    }\n\n    propSubmit(inputFilmValue);\n\n    setInputFilmValue('');\n  };\n\n  return (\n     <Box>\n        <Form onSubmit={handleSubmit}>\n           <Input\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies by keyword\"\n            value={inputFilmValue}\n            onChange={handleChange}\n                  />\n            <Button type=\"submit\">\n           Search\n          </Button>\n        </Form>\n      </Box>    \n  );\n};\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  propSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { Toaster, toast } from 'react-hot-toast';\nimport Searchbar from '../components/Searchbar';\nimport { fetchMovieByKeyWord } from '../fetchApi/fetchApi';\nimport Loader from '../components/Loader';\n\n\nexport function MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [errorM, setErrorM] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const searchFilmValue = searchParams.get('value');\n  const location = useLocation();\n\n  \n\n     const addSearchValue = formData => {\n     setSearchParams({value: formData})   \n  };\n\n    useEffect(() => {\n         if (searchFilmValue === '') {\n      return;\n        };\n        \n      if (searchFilmValue) {\n          \n        setLoading(true);\n        \n        \n        fetchMovieByKeyWord(searchFilmValue)\n          .then(data => {\n          const { data: { results } } = data;\n\n          if (results.length === 0) {\n            return toast.error('Sorry, there are no movies. Try another request...');\n          };\n\n          setMovies(results);\n          })\n          \n          .catch(error => {\n            setErrorM(error);\n        \n          })\n          \n          .finally(() => {\n            setTimeout(() => {\n              setLoading(false);\n            }, 1000)\n          });   \n      }         \n    }, [searchFilmValue]);\n\n    return (\n    <div>\n      <Toaster position=\"top-right\" />\n            <Searchbar propSubmit={addSearchValue} />\n        {loading && <Loader />}\n            <ul>\n                {movies.map(({id, title, name}) => (\n                    <li key={id}><Link to={`${id}`} state={{ from: location }}>{title ? title : name}</Link></li>\n                ))}\n            </ul>\n            {errorM && <h2>Whoops, something went wrong: error.</h2>}\n    </div>\n  );\n};"],"names":["SpinnerWrapper","styled","SpinnerRoundOutlined","size","thickness","speed","color","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","fetchMovieCredits","movieId","fetchMovieReviews","Box","Form","Input","Button","propSubmit","useState","inputFilmValue","setInputFilmValue","onSubmit","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","MoviesPage","useSearchParams","searchParams","setSearchParams","movies","setMovies","errorM","setErrorM","loading","setLoading","searchFilmValue","get","location","useLocation","useEffect","then","data","results","length","catch","error","finally","setTimeout","position","formData","Loader","map","id","title","name","to","state","from"],"sourceRoot":""}